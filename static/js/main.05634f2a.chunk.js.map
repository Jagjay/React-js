{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","react_default","a","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleModeGreen","htmlFor","toggleMode","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","showAlert","res1","match","join","res","split","length","defaultProps","aboutText","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","document","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.05634f2a.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize =(word)=>{\r\n        const lower = word.toLowerCase()\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1)\r\n    }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n      <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\"\r\n\r\nexport default function Navbar(props) {\r\n\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\"> */}\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.aboutText}\r\n              </Link>\r\n            </li> */}\r\n          </ul>\r\n          {/*<form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n  </form>*/}\r\n\r\n           <div className={`form-check form-switch text-${props.mode ==='light'?'green':'light'}`}>\r\n             <input className=\"form-check-input\" onClick={props.toggleModeGreen} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n             <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable GreenDarkmode</label>\r\n            </div>\r\n\r\n           <div className={`form-check form-switch text-${props.mode ==='light'?'dark':'light'}`}>\r\n             <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n             <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n           </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = { title: PropTypes.string.isRequired, aboutText: PropTypes.string.isRequired };\r\nNavbar.defaultProps = {title: 'Set title here', aboutText: 'About'};","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = ()=>{\r\n        //console.log(\"UpperCase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to UpperCase!\", \"success\")\r\n    }\r\n\r\n    const handleLowClick = ()=>{\r\n        //console.log(\"UpperCase was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to LowerCase!\", \"success\")\r\n    }\r\n\r\n    const handleClearClick = ()=>{\r\n        //console.log(\"UpperCase was clicked\" + text);\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text is cleared!\", \"success\")\r\n    }\r\n    \r\n    //remove all the symbols\r\n    const handletextExtract =()=>{\r\n        const regex = /[0-9/A-Z/a-z/ /]/g;\r\n\r\n        const letters = text.match(regex);\r\n        const res1 = letters.join('');\r\n        setText(res1)\r\n        props.showAlert(\"Text is extracted!\", \"success\")\r\n    }\r\n\r\n    //to extract only the numbers in the text:\r\n    const handleNumExtract =()=>{\r\n    const regex = /[0-9/ /]/g;\r\n\r\n    const digits = text.match(regex);\r\n    const res = digits.join('');\r\n    setText(res)\r\n    props.showAlert(\"Number is extracted!\", \"success\")\r\n    };\r\n\r\n    const handleOnChange = (event)=>{\r\n        //console.log(\"On Change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n  const [text, setText] = useState('');\r\n  //text='new Text'; // wrong way to set text\r\n  //setText=(\"new text\"); //correct way to set text\r\n  return (\r\n      <>\r\n    <div className='container' style={{color: props.mode==='dark'?'white':'#160841'}}>\r\n      <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n      <textarea className=\"form-control\" value= {text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color:props.mode==='dark'?'white':'#160841'}}  id=\"myBox\" rows=\"8\"></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-1\" onClick= {handleUpClick}>Convert to Uppercase</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick= {handleLowClick}>Convert to Lowercase</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick= {handleClearClick}>Clear</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick= {handletextExtract}>Extract Text</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick= {handleNumExtract}>Extract Number</button>\r\n    </div>\r\n    <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'#160841'}}>\r\n        <h2>Your text summary</h2>\r\n        <p> {text.split(\" \").length} words {text.length} characters</p>\r\n        <p> {0.008 * text.split(\" \").length} minutes to read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter something above to preview it here\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { useState } from \"react\";\nimport \"./App.css\";\nimport Alert from \"./components/Alert\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or not\n  const[alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) =>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }  \n\n  const toggleMode=()=>{\n    if(mode === 'light'){\n      setMode('dark')\n      document.body.style.backgroundColor='#160841'\n      showAlert(\"Dark mode is enabled\", \"success\")\n      document.title = 'TextUtils - Dark Mode'\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor='white'\n      showAlert(\"Light mode is enabled\", \"success\")\n      document.title = 'TextUtils - Light Mode'\n    }\n  }\n\n    const toggleModeGreen=()=>{\n      if(mode === 'light'){\n        setMode('green')\n        document.body.style.backgroundColor='#198754'\n        showAlert(\"Green Dark mode is enabled\", \"success\")\n      }\n      else{\n        setMode('light')\n        document.body.style.backgroundColor='white'\n        showAlert(\"Light mode is enabled\", \"success\")\n      }\n    \n  }\n  return (\n    <>\n     {/* <Navbar title = \"TextUtils\" aboutText = \"About Utils\"/ > */}\n     {/*<Navbar/>*/}\n     {/* <Router> */}\n     <Navbar title = \"TextUtils\" mode={mode} toggleMode={toggleMode} toggleModeGreen={toggleModeGreen}/>\n     <Alert alert={alert}/>\n     <div className=\"container my-3\">\n\n     {/* <Switch>\n          <Route exact path=\"/about\"> */}\n            {/* <About /> */}\n          {/* </Route> */}\n          {/* <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading = 'Enter the text to analyse' mode={mode}/>\n          {/* </Route> */}\n      {/* </Switch> */}\n\n     \n     </div>\n     {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}